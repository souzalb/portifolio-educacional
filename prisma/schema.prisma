generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  techs         UsersOnTechs[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Tech {
  id          String         @id @default(uuid())
  name        String
  rating      Float
  description String
  imageUrl    String
  access      String
  link        String
  type        String
  area        String
  users       UsersOnTechs[]
}

model UsersOnTechs {
  user   User   @relation(fields: [userId], references: [id])
  userId String // relation scalar field (used in the `@relation` attribute above)
  tech   Tech   @relation(fields: [techId], references: [id])
  techId String // relation scalar field (used in the `@relation` attribute above)

  @@id([userId, techId])
}
